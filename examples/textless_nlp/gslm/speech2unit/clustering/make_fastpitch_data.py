#!/usr/bin/env python

import argparse
import os

import numpy as np
import torch


def load_meta(meta_file):
    """Load metadata file with rows like `utt_id|unit_sequence`.

    Args:
      meta_file: Filepath string for metadata file with utterance IDs and
        corresponding quantized unit sequences, separated by pipes. Input
        unit sequences should be separated by spaces.

    Returns:
      A list of (utterance ID, quantized unit sequence) tuples. 
    """
    quantized_utts = []
    with open(meta_file) as f:
        for row in f:
            utt_id, unit_seq = row.strip().split("|")
            unit_seq = [i for i in unit_seq.split()]
            quantized_utts.append((utt_id, unit_seq))
    return quantized_utts


def run_length_encode(symbols):
    """Encode a sequence of repeating symbols as (symbol, run length) pairs.

    Args:
      symbols: A sequence of symbols characterizing a single utterance.

    Returns:
      A list of (symbol, run length) tuples providing durations for each symbol
      in the input sequence.
    """
    run_lengths = []
    dur = 1
    for u0, u1 in zip(symbols, symbols[1:]):
        if u1 == u0:
            dur += 1
        else:
            run_lengths.append((u0, dur))
            dur = 1
    run_lengths.append((u1, dur))
    return run_lengths


def dump_durs_and_write_meta(quantized_utts, data_dir, meta_out, durations_dir,
                             mels_dir, pitch_dir):
    """Dump unit durations and write FastPitch metadata file.

    Run-length encode unit sequences and dump to per-utterance duration files.

    Write FastPitch-compatible metadata file like:
      mels_dir/utt.pt|durations_dir/utt.pt|pitch_dir/utt.pt|unit_sequence

    We assume mels_dir and pitch_dir will exist by the time this metadata file
    finds use, e.g. generated by FastPitch/extract_mels.py, and that all paths
    within the metadata file are relative to data_dir.

    Args:
      quantized_utts: A sequence of (utterance ID, quantized unit sequence) pairs
      data_dir: Base directory for output data (str)
      meta_out: Output metadata filename (str)
      durations_dir: Directory to save per-utterance duration files, relative
        to data_dir
      mels_dir: Directory with mel feature files, relative to data_dir
      pitch_dir: Directory with pitch value files, relative to data_dir
    """
    output_dir = os.path.join(data_dir, durations_dir)
    os.makedirs(output_dir, exist_ok=True)
    with open(meta_out, 'w') as outf:
        for utt_id, unit_seq in quantized_utts:
            rle_seq = run_length_encode(unit_seq)
            units, durs = zip(*rle_seq)  # unpack list of tuples to two sequences

            durs = torch.LongTensor(durs)
            dur_relative_path = os.path.join(durations_dir, utt_id + ".pt")
            dur_full_path = os.path.join(data_dir, dur_relative_path)
            torch.save(durs.cpu().int(), dur_full_path)  # following FastPitch/extract_mels.py

            mels_path = os.path.join(mels_dir, utt_id + ".pt")
            pitch_path = os.path.join(pitch_dir, utt_id + ".pt")
            units_str = " ".join(units)
            outf.write("{}|{}|{}|{}\n".format(
                mels_path, dur_relative_path, pitch_path, units_str))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--quantized_meta", type=str, required=True,
        help="Metadata file with quantized utterances")
    parser.add_argument("--data_dir", type=str, required=True,
        help="Base directory to save derived data")
    parser.add_argument("--output_meta", type=str, default=None,
        help="Name of output FastPitch metadata file, containing quantized "
        "unit sequences and paths to duration files per utterance. Default: "
        "`data_dir/quantized_meta`.")
    parser.add_argument("--durations_dir", type=str, default="durations",
        help="Name of output directory for duration files, relative to "
        "`data_dir`")
    parser.add_argument("--mels_dir", type=str, default="mels",
        help="Directory with mels dumped from FastPitch/extract_mels.py")
    parser.add_argument("--pitch_dir", type=str, default="pitch_char",
        help="Directory with pitch values dumped from FastPitch/extract_mels.py")
    args = parser.parse_args()

    if args.output_meta is None:
        meta_base = os.path.basename(args.quantized_meta)
        args.output_meta = os.path.join(args.data_dir, meta_base)

    quantized_utts = load_meta(args.quantized_meta)
    dump_durs_and_write_meta(quantized_utts, args.data_dir, args.output_meta,
                             args.durations_dir, args.mels_dir, args.pitch_dir)
